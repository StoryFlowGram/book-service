services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT}:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 3s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6380:6379"  
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  minio:
    image: minio/minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio-data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped


  api:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./:/app
    env_file:
      - .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      JWT_SECRET: ${JWT_SECRET}
      S3_ENDPOINT_URL: ${S3_ENDPOINT_URL}
      TASKIQ_BROKER_URL: ${TASKIQ_BROKER_URL}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

    networks:
      - app-network
    ports:
      - "8000:8000"
    restart: unless-stopped

  taskiq-worker: 
    build:
      context: .
      dockerfile: Dockerfile
    user: "1000:1000"
    command: taskiq worker app.infrastructure.taskiq.broker:broker
    volumes:
      - ./:/app
    env_file:
      - .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      TASKIQ_BROKER_URL: ${TASKIQ_BROKER_URL}
      S3_ENDPOINT_URL: ${S3_ENDPOINT_URL}
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

volumes:
  postgres-data:
  minio-data:

networks:
  app-network:
    driver: bridge